security:
    password_hashers:
        App\Entity\User:
            algorithm: auto

    providers:
        users_in_database:
            entity:
                class: App\Entity\User
                property: email

#    firewalls:
#        login:
#            pattern: ^/api/v1/auth
#            stateless: true
#            json_login:
#                check_path: /api/v1/auth
#                username_path: email
#                password_path: password
#                success_handler: App\Security\JWTLoginSuccessHandler
#                # success_handler: lexik_jwt_authentication.handler.authentication_success
#                failure_handler: lexik_jwt_authentication.handler.authentication_failure

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api:
            pattern: ^/api
            stateless: true
            methods: ["OPTIONS", "GET", "POST", "PUT", "DELETE"]
            jwt: ~

    access_control:
        - { path: ^/api/v1/auth, roles: PUBLIC_ACCESS }
        - { path: ^/api/v1/register, roles: PUBLIC_ACCESS }
        - { path: ^/api/v1/doc, roles: PUBLIC_ACCESS }
        - { path: ^/api/v1/token/refresh, roles: PUBLIC_ACCESS }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: plaintext
